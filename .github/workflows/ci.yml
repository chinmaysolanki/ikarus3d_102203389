name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  python-tests:
    name: Python Tests & Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('server/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r server/requirements.txt
        # Dev tools
        pip install ruff black mypy pytest pytest-cov
    
    - name: Run Python linting
      run: |
        ruff check server/
        black --check server/
    
    - name: Run Python type checking
      run: |
        mypy server/
    
    - name: Run Python tests
      run: |
        python -m pytest -v --maxfail=1 --disable-warnings --cov=server --cov-report=xml
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage

  typescript-tests:
    name: TypeScript Tests & Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install dependencies
      run: |
        cd web
        if [ -f package-lock.json ]; then npm ci; else npm install; fi
    
    - name: Run TypeScript type checking
      run: |
        cd web
        npm run typecheck
    
    - name: Run ESLint
      run: |
        cd web
        npm run lint
    
    - name: Check Prettier formatting
      run: |
        cd web
        npm run format:check
    
    - name: Build frontend
      run: |
        cd web
        npm run build

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: [python-tests, typescript-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r server/requirements.txt
        pip install pytest
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install Node.js dependencies
      run: |
        cd web
        npm ci
    
    - name: Create environment file
      run: |
        cp .env.example .env
        echo "PINECONE_API_KEY=" >> .env
        echo "PINECONE_ENV=us-west1-gcp" >> .env
        echo "PINECONE_INDEX=furniture-recs" >> .env
    
    - name: Create data directory
      run: |
        mkdir -p data/
        mkdir -p server/models/
        mkdir -p notebooks/figs/
    
    - name: Run smoke test
      run: |
        python3 smoke_test.py
      timeout-minutes: 5

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r server/requirements.txt
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check
    
    - name: Run bandit security scan
      run: |
        bandit -r server/ -f json -o bandit-report.json || true
        bandit -r server/ -f txt

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [python-tests, typescript-tests, smoke-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        cd web && npm ci
    
    - name: Build frontend
      run: |
        cd web
        npm run build
    
    - name: Create deployment artifact
      run: |
        mkdir -p dist/
        cp -r server/ dist/
        cp -r web/dist/ dist/frontend/
        cp pyproject.toml dist/
        cp README.md dist/
        cp LICENSE dist/
        tar -czf ai-furniture-recs.tar.gz -C dist .
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ai-furniture-recs-build
        path: ai-furniture-recs.tar.gz
        retention-days: 30

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [python-tests, typescript-tests, smoke-test, security-scan]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.python-tests.result == 'success' && needs.typescript-tests.result == 'success' && needs.smoke-test.result == 'success' }}
      run: |
        echo "‚úÖ All CI checks passed!"
        echo "üéâ Ready for deployment!"
    
    - name: Notify failure
      if: ${{ needs.python-tests.result == 'failure' || needs.typescript-tests.result == 'failure' || needs.smoke-test.result == 'failure' }}
      run: |
        echo "‚ùå Some CI checks failed!"
        echo "üîß Please fix the issues before merging."
        exit 1
